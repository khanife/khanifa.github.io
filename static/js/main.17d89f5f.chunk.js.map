{"version":3,"sources":["components/Navbar.js","components/Todo.js","components/Hello.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","useState","menu","setMenu","className","href","role","onClick","aria-label","aria-expanded","data-target","aria-hidden","type","Todo","props","todo","done","value","TodoList","todos","Date","now","map","key","id","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.17d89f5f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction Navbar() {\r\n  const [menu, setMenu] = useState(false);\r\n\r\n  return (\r\n    <div className=\"navbar has-shadow\">\r\n      <div className=\"navbar-brand\">\r\n        <div className=\"navbar-item\">\r\n          <p className=\"title\"><a href=\"/\">Khanifa</a></p>\r\n        </div>\r\n\r\n        <a role=\"button\" onClick={() => setMenu(!menu)} className={`navbar-burger burger ${menu ? \"is-active\" : \"\"}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n        </a>\r\n      </div>\r\n\r\n      <div className={`navbar-menu ${menu ? \"is-active\" : \"\"}`}>\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"field has-addons\">\r\n              <p className=\"control is-expanded\">\r\n                <input type=\"text\" className=\"input\" />\r\n              </p>\r\n              <p className=\"control\">\r\n                <button className=\"button is-info has-text-weight-bold\">\r\n                  Cari\r\n                </button>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\n\r\nexport default function Todo(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-content\">\r\n        <div className=\"level\">\r\n          <div className=\"level-left\">\r\n            <div className=\"level-item\">\r\n              <p className={`title ${props.todo.done ? \"has-text-grey-light\" : \"\"}`}>{props.todo.value}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-right\">\r\n            <div className=\"level-item buttons\">\r\n              <button className={`button has-text-weight-bold ${props.todo.done ? \"is-warning\" : \"is-primary\"}`}>{props.todo.done ? \"Undo\" : \"Done\"}</button>\r\n              <button className=\"button is-danger has-text-weight-bold\">Delete</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList() {\r\n  const todos = [\r\n    {\r\n      \"id\": Date.now(),\r\n      \"value\": \"JavaScript\",\r\n      \"done\": false\r\n    },\r\n    {\r\n      \"id\": Date.now()+1,\r\n      \"value\": \"Android\",\r\n      \"done\": true  \r\n    }\r\n  ]\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"hero is-info\">\r\n        <div className=\"hero-body has-text-centered\">\r\n          <p className=\"title is-1\">Halo Dunia!</p>\r\n        </div>\r\n      </div>\r\n\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          {todos.map(todo => (\r\n            <Todo key={todo.id} todo={todo}/>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    </div>\r\n  )\r\n}","import React from 'react';\n\nimport Navbar from './components/Navbar'\nimport Hello from './components/Hello'\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Hello/>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}